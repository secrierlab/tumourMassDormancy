geom_errorbar(aes(ymax = U, ymin = L)) +
labs(x = element_blank(), y = 'log Hazard Ratio (95% CI)') +
geom_hline(yintercept = 0, linetype = 'dashed', color = 'red') +
theme(axis.ticks.x = element_blank(), axis.text.x = element_blank()) +
facet_wrap(~ formula, nrow = 1); print(p_hr); ggsave(filename = 'Figures/CoxAnalysis_TMD.pdf', plot = p_hr)
form1 <- as.formula('Surv(time, status) ~ TMD + age_at_diagnosis + gender')
form2 <- as.formula('Surv(time, status) ~ TMD + age_at_diagnosis + gender + Study')
form3 <- as.formula('Surv(time, status) ~ TMD + age_at_diagnosis + gender + TumorStage')
form4 <- as.formula('Surv(time, status) ~ TMD + age_at_diagnosis + gender + Study + TumorStage')
formulas <- c(form1, form2, form3, form4)
hr.collate <- data.frame()
for (form in formulas) {
r <- coxph(form, data = surv.tmd2)
r.res <- data.frame(TMD = c('AD','ID','A/ID'),
HR = coef(r)[2:4],
L = confint(r)[2:4,1],
U = confint(r)[2:4,2],
formula = ifelse(form == form1, 'TMD/Age/Gender',
ifelse(form == form2, '+ Study',
ifelse(form == form3, '+ Stage',
ifelse(form == form4, '+ Study + Stage',NA)))))
hr.collate <- rbind(hr.collate, r.res)
}
hr.collate$formula <- factor(hr.collate$formula, levels = c('TMD/Age/Gender','+ Study','+ Stage','+ Study + Stage'))
hr.collate$TMD <- factor(hr.collate$TMD, levels = c('ID','AD','A/ID'))
p_hr <- ggplot(hr.collate, aes(x = TMD, y = HR)) + theme_bw() +
geom_point(aes(colour = TMD), size = 4) + geom_errorbar(aes(ymax = U, ymin = L)) +
labs(x = 'Tumour Mass Dormancy Group', y = 'log Hazard ratio (95% CI)') +
geom_hline(yintercept = 0, linetype = 'dashed', color = 'red') +
scale_colour_manual(values = c('A/ID' = '#1B9E77',
'AD' = '#D95F02',
'ID' = '#7570B3')) +
facet_wrap(~ formula, nrow = 1); print(p_hr); ggsave(filename = 'Figures/Figure_Survival/CoxAnalysis_TMD_detailed.pdf', plot = p_hr)
p_hr <- ggplot(hr.collate, aes(x = TMD, y = HR)) + theme_bw() +
geom_point(aes(colour = TMD), size = 4) + geom_errorbar(aes(ymax = U, ymin = L)) +
labs(x = 'Tumour Mass Dormancy Group', y = 'log Hazard ratio (95% CI)') +
geom_hline(yintercept = 0, linetype = 'dashed', color = 'red') +
scale_colour_manual(values = c('A/ID' = '#1B9E77',
'AD' = '#D95F02',
'ID' = '#7570B3')) +
facet_wrap(~ formula, nrow = 1); print(p_hr); ggsave(filename = 'Figures/CoxAnalysis_TMD_detailed.pdf', plot = p_hr)
# TMD categorisation by tumour stage
p_tmdStage <- ggplot(surv.tmd2[!is.na(surv.tmd2$TumorStage),], aes(x = TumorStage, fill = TMD_three_categories)) +
geom_bar(position = 'fill') + scale_y_continuous(labels = scales::percent)
print(p_tmdStage)
ggsave(filename = 'Figures/Figure_Survival/Barplot_TMD_by_Stage.pdf', plot = p_tmdStage)
ggsave(filename = 'Figures/Barplot_TMD_by_Stage.pdf', plot = p_tmdStage)
p_tmdStage <- ggplot(surv.tmd2[!is.na(surv.tmd2$TumorStage),], aes(x = TumorStage, fill = TMD)) +
geom_bar(position = 'fill') + scale_y_continuous(labels = scales::percent)
print(p_tmdStage)
ggsave(filename = 'Figures/Barplot_TMDdet_by_Stage.pdf', plot = p_tmdStage)
setwd('~/Documents/PhD/Data/')
setwd('~/Documents/PhD/Data/')
library(TCGAbiolinks)
library(survminer)
library(survival)
library(finalfit)
# Download survival data into your current directory, and save within tcga.clinical list
studies <- list.dirs(path = 'GDCdata', full.names = FALSE, recursive = FALSE)
tcga.clinical <- list()
for (study in studies) {
print(paste0('Download data: ', study, '...'))
query <- GDCquery_clinic(study, type = 'clinical')
query <- query[, c('submitter_id',
'tumor_stage',
'age_at_diagnosis',
'days_to_last_follow_up',
'gender',
'vital_status',
'days_to_death')]
query$Study <- strsplit(study, '-')[[1]][2]
tcga.clinical[[strsplit(study, '-')[[1]][2]]] <- query
}
surv.data <- do.call(rbind, tcga.clinical)
# Add TMD categories
setwd('~/Documents/PhD/Projects/Apobec_Dormancy/Scripts/Survival/')
load('programme_scores_and_TMD_assignments.RData')
prog_expr <- prog_expr[, c('PatientID',
'TMD_two_categories', 'TMD_three_categories',
'TMD_two_categories_detailed', 'TMD_three_categories_detailed')]
surv.tmd <- merge(x = surv.data, y = prog_expr,
by.x = 'submitter_id', by.y = 'PatientID')
# Basic survival analysis
surv.tmd$time <- ifelse(surv.tmd$vital_status == 'Dead',
surv.tmd$days_to_death, surv.tmd$days_to_last_follow_up)
surv.tmd$status <- ifelse(surv.tmd$vital_status == 'Dead', 1, 0)
surv.tmd2 <- surv.tmd[!is.na(surv.tmd$time),]
# Fit survival curves
surv.tmd2$TMD <- sapply(surv.tmd2$TMD_three_categories_detailed,
function(x) ifelse(x == 'Angiogenic and Immunogenic Dormancy', 'A/ID',
ifelse(x == 'Angiogenic Dormancy', 'AD',
ifelse(x == 'Immunogenic Dormancy', 'ID',x))))
surv.tmd2$TMD <- factor(surv.tmd2$TMD, levels = c('NO','MID','AD','ID','A/ID'))
surv.tmd2$TMD_three_categories <- factor(surv.tmd2$TMD_three_categories, levels = c('NO','MID','YES'))
# Kaplan-Meier plots
fit_tmd <- survfit(Surv(time, status) ~ TMD_three_categories, data = surv.tmd2) # standard categories
p_tmd <- ggsurvplot(fit_tmd, pval = TRUE, conf.int = TRUE,
risk.table = TRUE, risk.table.y.text.col = TRUE)
print(p_tmd)
ggsave(filename = 'Figures/KaplanMeier_TMD.pdf', plot = p_tmd$plot)
fit_tmd2 <- survfit(Surv(time, status) ~ TMD, data = surv.tmd2) # detailed categories
p_tmd2 <- ggsurvplot(fit_tmd2, pval = TRUE, conf.int = TRUE,
risk.table = TRUE, risk.table.y.text.col = TRUE,
palette = c('grey','grey95','#D95F02','#7570B3','#1B9E77'))
print(p_tmd2)
ggsave(filename = 'Figures/KaplanMeier_TMDdetailed.pdf', plot = p_tmd2$plot)
# Kaplan-Meier plots by Tumour Stage
surv.tmd2$TumorStage <- sapply(surv.tmd2$tumor_stage,
function(x) ifelse(x %in% c('stage i','stage ia','stage ib'),'Stage 1',
ifelse(x %in% c('stage ii','stage iia','stage iib','stage iic'),'Stage 2',
ifelse(x %in% c('stage iii','stage iiia','stage iiib','stage iiic'),'Stage 3',
ifelse(x %in% c('stage iv','stage iva','stage ivb','stage ivc'),'Stage 4',NA)))))
surv.early <- surv.tmd2[surv.tmd2$TumorStage %in% c('Stage 1','Stage 2'), ]
surv.late <- surv.tmd2[surv.tmd2$TumorStage %in% c('Stage 3','Stage 4'), ]
p_early <- ggsurvplot(survfit(Surv(time, status) ~ TMD_three_categories, data = surv.early),
pval = TRUE); print(p_early); ggsave(filename = 'Figures/KaplanMeier_EarlyStage.pdf', plot = p_early$plot)
p_late <- ggsurvplot(survfit(Surv(time, status) ~ TMD_three_categories, data = surv.late),
pval = TRUE); print(p_late); ggsave(filename = 'Figures/KaplanMeier_LateStage.pdf', plot = p_late$plot)
# Hazard Ratio comparisons: TMD_three_categories
form1 <- as.formula('Surv(time, status) ~ TMD_three_categories + age_at_diagnosis + gender')
form2 <- as.formula('Surv(time, status) ~ TMD_three_categories + age_at_diagnosis + gender + Study')
form3 <- as.formula('Surv(time, status) ~ TMD_three_categories + age_at_diagnosis + gender + TumorStage')
form4 <- as.formula('Surv(time, status) ~ TMD_three_categories + age_at_diagnosis + gender + Study + TumorStage')
formulas <- c(form1, form2, form3, form4)
for (i in 1:length(formulas)) {
form.i <- formulas[[i]]
print(paste0('Plotting: ',form.i,'...'))
g <- ggforest(model = coxph(form.i, data = surv.tmd2))
ggsave(filename = paste0('Figures/HazardRatio_exp',i,'.pdf'), plot = g,
width = 8, height = 10)
}
# Hazard Ratio comparisons: TMD_three_categories
hr.collate <- data.frame(formula = c('TMD/Age/Gender','+ Study','+ Stage','+ Study + Stage'),
HR = NA, L = NA, U = NA)
for (i in 1:length(formulas)) {
r <- coxph(formulas[i][[1]], data = surv.tmd2)
hr.collate$HR[i] <- coef(r)[2]
hr.collate$L[i] <- confint(r)[2,1]
hr.collate$U[i] <- confint(r)[2,2]
}
hr.collate$formula <- factor(hr.collate$formula, levels = hr.collate$formula)
p_hr <- ggplot(hr.collate, aes(x = 1, y = HR)) + theme_bw() +
geom_point(size = 4) +
geom_errorbar(aes(ymax = U, ymin = L)) +
labs(x = element_blank(), y = 'log Hazard Ratio (95% CI)') +
geom_hline(yintercept = 0, linetype = 'dashed', color = 'red') +
theme(axis.ticks.x = element_blank(), axis.text.x = element_blank()) +
facet_wrap(~ formula, nrow = 1); print(p_hr); ggsave(filename = 'Figures/CoxAnalysis_TMD.pdf', plot = p_hr)
# Hazard Ratio comparisons: TMD_three_categories_detailed
form1 <- as.formula('Surv(time, status) ~ TMD + age_at_diagnosis + gender')
form2 <- as.formula('Surv(time, status) ~ TMD + age_at_diagnosis + gender + Study')
form3 <- as.formula('Surv(time, status) ~ TMD + age_at_diagnosis + gender + TumorStage')
form4 <- as.formula('Surv(time, status) ~ TMD + age_at_diagnosis + gender + Study + TumorStage')
formulas <- c(form1, form2, form3, form4)
hr.collate <- data.frame()
for (form in formulas) {
r <- coxph(form, data = surv.tmd2)
r.res <- data.frame(TMD = c('AD','ID','A/ID'),
HR = coef(r)[2:4],
L = confint(r)[2:4,1],
U = confint(r)[2:4,2],
formula = ifelse(form == form1, 'TMD/Age/Gender',
ifelse(form == form2, '+ Study',
ifelse(form == form3, '+ Stage',
ifelse(form == form4, '+ Study + Stage',NA)))))
hr.collate <- rbind(hr.collate, r.res)
}
hr.collate$formula <- factor(hr.collate$formula, levels = c('TMD/Age/Gender','+ Study','+ Stage','+ Study + Stage'))
hr.collate$TMD <- factor(hr.collate$TMD, levels = c('ID','AD','A/ID'))
p_hr <- ggplot(hr.collate, aes(x = TMD, y = HR)) + theme_bw() +
geom_point(aes(colour = TMD), size = 4) + geom_errorbar(aes(ymax = U, ymin = L)) +
labs(x = 'Tumour Mass Dormancy Group', y = 'log Hazard ratio (95% CI)') +
geom_hline(yintercept = 0, linetype = 'dashed', color = 'red') +
scale_colour_manual(values = c('A/ID' = '#1B9E77',
'AD' = '#D95F02',
'ID' = '#7570B3')) +
facet_wrap(~ formula, nrow = 1); print(p_hr); ggsave(filename = 'Figures/CoxAnalysis_TMD_detailed.pdf', plot = p_hr)
# TMD categorisation by tumour stage
p_tmdStage <- ggplot(surv.tmd2[!is.na(surv.tmd2$TumorStage),], aes(x = TumorStage, fill = TMD_three_categories)) +
geom_bar(position = 'fill') + scale_y_continuous(labels = scales::percent)
print(p_tmdStage)
ggsave(filename = 'Figures/Barplot_TMD_by_Stage.pdf', plot = p_tmdStage)
p_tmdStage <- ggplot(surv.tmd2[!is.na(surv.tmd2$TumorStage),], aes(x = TumorStage, fill = TMD)) +
geom_bar(position = 'fill') + scale_y_continuous(labels = scales::percent)
print(p_tmdStage)
ggsave(filename = 'Figures/Barplot_TMDdet_by_Stage.pdf', plot = p_tmdStage)
library('Rtsne')
library('ggplot2')
library('factoextra')
library('NbClust')
library('stats')
library('EMCluster')
library('dplyr')
library('ggpubr')
setwd('~/Documents/PhD/Projects/Apobec_Dormancy/Data/SignatureProfiles/')
files = list.files('.')
sigs.complete <- NULL
for (file in files) {
study = strsplit(file, split = '[.]')[[1]][3]
load(file)
sigs.defaultnounknown$Study = study
sigs.complete <- rbind(sigs.complete, sigs.defaultnounknown)
print(paste0('Download complete: ', study, ' , Total samples: ', nrow(sigs.complete)))
}
# Remove zero columns
sigs.input <- sigs.complete[,apply(sigs.complete[,1:ncol(sigs.complete)-1], 2, sum) > 0]
# TSNE - initial PCA step?
# for (pca.init in c(FALSE, TRUE)) {
for (pca.init in TRUE) {
set.seed(1234)
print(paste0('Running... pca = ',pca.init, ': ', Sys.time()))
sigs.tsne.full = Rtsne(sigs.input[,1:ncol(sigs.input)-1], perplexity = 100, max_iter = 5000, pca = pca.init, check_duplicates = FALSE)
sigs.result.tsne <- cbind(sigs.input, as.data.frame(sigs.tsne.full$Y))
colnames(sigs.result.tsne)[33:34] <- c('TSNE1', 'TSNE2')
p <- ggplot(sigs.result.tsne, aes(x=TSNE1, y=TSNE2, colour=Study)) +
geom_point() +
ggtitle(paste0('pca = ',pca.init,', Perplexity = 100, max_iter = 5000'))
print(p)
}
# TSNE - EM Clustering (optimal number of clusters)
emclust.optnum <- data.frame(n.clust = 1:20, likelihood = NA)
for (n.clust in emclust.optnum$n.clust) {
print(paste0('Testing... n.clust = ',n.clust))
sigs.tsne.g <- emgroup(sigs.result.tsne[,c('TSNE1','TSNE2')], nclass = n.clust)
emclust.optnum$likelihood[n.clust] <- sigs.tsne.g$llhdval
}
plot(x = emclust.optnum$n.clust, y = emclust.optnum$likelihood,
pch = 16, type = 'b', xlab = 'Num. clusters', ylab = 'Likelihood', main = 'Optimal Num. Clusters (likelihood)')
abline(v = 10, col = 'ref')
abline(v = 10, col = 'red')
plot(x = emclust.optnum$n.clust, y = emclust.optnum$likelihood,
pch = 16, type = 'b', xlab = 'Num. clusters', ylab = 'Likelihood', main = 'Optimal Num. Clusters (likelihood)')
abline(v = 10, col = 'red'); abline(v = 17, col = 'red')
# Redo first tSNE for plotting purposes
setwd('~/Documents/PhD/Projects/Apobec_Dormancy/')
set.seed(1234)
sigs.tsne.full = Rtsne(sigs.input[,1:ncol(sigs.input)-1], perplexity = 100, max_iter = 5000, pca = TRUE, check_duplicates = FALSE)
sigs.tsne <- cbind(sigs.input, as.data.frame(sigs.tsne.full$Y))
colnames(sigs.tsne)[33:34] <- c('TSNE1', 'TSNE2')
# EM clustering
sigs.tsne$Apobec <- sigs.tsne$SBS2 + sigs.tsne$SBS13
# Plot
p_tsne.study <- ggplot(sigs.tsne, aes(x = TSNE1, y = TSNE2, colour = Study)) + geom_point(size = .5) + theme_bw()
print(p_tsne.study)
# Load in APOBEC enrichment scores and add them to apobec.group.replic
apobec_enrich.files <- list.files(path = '~/Documents/PhD/Data/Sigminer_APOBECEnrich',
pattern = 'Rdata',full.names = TRUE)
apobec.group.replic$APOBEC_Enriched = apobec.group.replic$APOBEC_Enrichment <- NA
# For each file: load, add $APOBEC_Enrichment and $APOBEC_Enriched to apobec.group.replic
for (file in apobec_enrich.files) {
load(file) # filename: apobec
# Remove samples which don't have signature profiles
apobec <- apobec[apobec$Tumor_Sample_Barcode %in% apobec.group.replic$samples]
samples.index <- match(apobec$Tumor_Sample_Barcode, apobec.group.replic$samples)
apobec.group.replic$APOBEC_Enrichment[samples.index] <- apobec$APOBEC_Enrichment
apobec.group.replic$APOBEC_Enriched[samples.index] <- apobec$APOBEC_Enriched
}
apobec_enrich.files
apobec.group.replic$APOBEC_Enriched = apobec.group.replic$APOBEC_Enrichment <- NA
# # If required:
load('/Users/daniel/Documents/PhD/Projects/Apobec_Dormancy/apobec.group.replic.Rdata')
# Load in APOBEC enrichment scores and add them to apobec.group.replic
apobec_enrich.files <- list.files(path = '~/Documents/PhD/Data/Sigminer_APOBECEnrich',
pattern = 'Rdata',full.names = TRUE)
apobec.group.replic$APOBEC_Enriched = apobec.group.replic$APOBEC_Enrichment <- NA
# For each file: load, add $APOBEC_Enrichment and $APOBEC_Enriched to apobec.group.replic
for (file in apobec_enrich.files) {
load(file) # filename: apobec
# Remove samples which don't have signature profiles
apobec <- apobec[apobec$Tumor_Sample_Barcode %in% apobec.group.replic$samples]
samples.index <- match(apobec$Tumor_Sample_Barcode, apobec.group.replic$samples)
apobec.group.replic$APOBEC_Enrichment[samples.index] <- apobec$APOBEC_Enrichment
apobec.group.replic$APOBEC_Enriched[samples.index] <- apobec$APOBEC_Enriched
}
# Comparisons
table(apobec.group.replic$APOBEC_Enriched, apobec.group.replic$Apobec.Total, dnn = c('APOBEC_Enriched','APOBEC Cluster Assignment'))
apobec.group.replic_tab <- apobec.group.replic %>%
group_by(Apobec.Total, APOBEC_Enriched) %>% summarise(n())
colnames(apobec.group.replic_tab) <- c('InApobecCluster','APOBEC_Enriched','Freq')
p_score <- ggplot(data = apobec.group.replic_tab, aes(x=InApobecCluster, y=Freq, fill=APOBEC_Enriched)) +
geom_bar(stat='identity')
print(p_score)
ggsave(filename = 'Figures/Figure_Apobec/ApobecEnrich_Barplot.pdf', plot = p_score)
sigs.tsne$APOBEC_Enriched <- apobec.group.replic$APOBEC_Enriched[match(apobec.group.replic$samples, rownames(sigs.tsne))]
sigs.tsne$APOBEC_Enrichment <- apobec.group.replic$APOBEC_Enrichment[match(apobec.group.replic$samples, rownames(sigs.tsne))]
ggplot(sigs.tsne, aes(x=TSNE1, y=TSNE2, colour=Study)) +
geom_point() +
ggtitle(paste0('Apobec Cluster: run 10'))
ggplot(sigs.tsne, aes(x=TSNE1, y=TSNE2, colour=Apobec)) +
geom_point() +
scale_colour_gradient(low='lightskyblue', high='navy') +
ggtitle(paste0('Apobec Cluster: run 10'))
ggplot(sigs.tsne, aes(x=TSNE1, y=TSNE2, colour=APOBEC_Enrichment)) +
geom_point() +
scale_colour_gradient(low='lightskyblue', high='navy') +
ggtitle(paste0('Apobec Cluster: Enrichment'))
ggplot(sigs.tsne, aes(x=TSNE1, y=TSNE2, colour=Apobec.Cluster)) +
geom_point() +
ggtitle(paste0('Apobec Cluster: run 10'))
head(sigs.tsne)
p_tsne.enrich <- ggplot(sigs.tsne, aes(x=TSNE1, y=TSNE2, colour=APOBEC_Enriched)) +
geom_point(size = .5) +
ggtitle(paste0('Apobec Cluster: Enrichment'))
plot(p_tsne.enrich)
ggsave(filename = 'Figures/Figure_Apobec/ApobecEnrich_tSNE.pdf', plot = p_tsne.enrich)
getwd()
setwd('Scripts/Hypoxia/')
load('HypoxiaSignatures.Rdata') # Genes constituting defined hypoxia signatures (excluding TMD programme)
# Load program scores to show which samples are included
load('programme_scores_and_TMD_assignments.RData')
dormancy_markers <- read.table('dormancyMarkers_immunologic-angiogenic_updated2.txt', header = TRUE)
dormancy_markers <- read.table('dormancyMarkers_immunologic-angiogenic_updated2.txt', header = TRUE)
exhaustion_markers <- read.table('exhaustionMarkers.txt')
genes.dormancy <- dormancy_markers$Gene
genes.exhaustion <- exhaustion_markers$V1
# Remove genes from hypoxia signatures which appear in dormancy signature
hypoxia.sigs$buffa <- hypoxia.sigs$buffa[!(hypoxia.sigs$buffa %in% genes.dormancy)]
hypoxia.sigs$west <- hypoxia.sigs$west[!(hypoxia.sigs$west %in% genes.dormancy)]
hypoxia.sigs$winter <- hypoxia.sigs$winter[!(hypoxia.sigs$winter) %in% genes.dormancy]
getwd()
# Load FPKM-normalized expression data
#   and extract all genes included in the 3 hypoxia signatures
se.list <- list()
col.req <- c('barcode','patient','sample','Study','definition')
# Specify path to FPKM_Normalized values
se.files <- list.files(path = '../../Data/GeneExpression/FPKM_Normalized/',
pattern = 'Rdata',
full.names = TRUE)
for (file in se.files) {
study <- strsplit(file, '[.]')[[1]][2]
print(paste0('Loading expression data from study: ',study,'...'))
load(file)
se$Study <- study
colData(se) <- colData(se)[,col.req]
se <- se[,se$definition == 'Primary solid Tumor']
se <- se[rowData(se)$external_gene_name %in% unique(unlist(hypoxia.sigs)),]
se.list[[study]] <- se
}
se.files[1]
strsplit(se.files[1], '[.]')[[1]]
strsplit(se.files[1], '[.]')[[1]][6]
for (file in se.files) {
study <- strsplit(file, '[.]')[[1]][6] # Alter to match study code in file name
print(paste0('Loading expression data from study: ',study,'...'))
load(file)
se$Study <- study
colData(se) <- colData(se)[,col.req]
se <- se[,se$definition == 'Primary solid Tumor']
se <- se[rowData(se)$external_gene_name %in% unique(unlist(hypoxia.sigs)),]
se.list[[study]] <- se
}
se.comb <- do.call(cbind, unlist(se.list))
se.comb <- se.comb[, prog_expr$Barcode]
se.comb.assay <- assay(se.comb)
rownames(se.comb.assay) <- rowData(se.comb)$external_gene_name
# Define function to convert expression scores into binary hypoxia profiles
hypoxia.convert <- function(expr.vec) {
median.expr <- median(expr.vec)
hypoxia.vec <- sapply(expr.vec, function(x) ifelse(x > median.expr, 1, -1))
return(hypoxia.vec)
}
# Create data frame for collating hypoxia scores
hypoxia.scores <- data.frame(Barcode = se.comb$barcode,
Study = se.comb$Study)
for (sig in c('buffa', 'west', 'winter')) {
hypoxia.sig.genes <- hypoxia.sigs[[sig]]
hypoxia.sig.genes <- hypoxia.sig.genes[hypoxia.sig.genes %in% rownames(se.comb.assay)]
se.sig <- se.comb.assay[hypoxia.sig.genes,]
se.hypoxia <- apply(se.sig, 1, hypoxia.convert)
se.hypoxia.scores <- apply(se.hypoxia, 1, sum)
hypoxia.scores[[sig]] <- se.hypoxia.scores
}
# Save hypoxia scores
save(hypoxia.scores, file = 'Hypoxia_SigScores.Rdata')
head(hypoxia.scores)
getwd()
library(ggplot2)
library(ggpubr)
library(tidyr)
library(dplyr)
library(gridExtra)
load('Hypoxia_SigScores.Rdata') # Hypoxia signature scores
load('programme_scores_and_TMD_assignments.RData') # TMD programme scores
# Merge programmes, and re-label TMD_three_categories_detailed for ease
df.full <- cbind(prog_expr, hypoxia.scores[,c('buffa','west','winter')])
df.full$TMD_three_categories_detailed <- sapply(df.full$TMD_three_categories_detailed,
function(x) ifelse(x == 'Angiogenic and Immunogenic Dormancy','A/ID',
ifelse(x == 'Angiogenic Dormancy', 'AD',
ifelse(x == 'Immunogenic Dormancy', 'ID',x))))
# Boxplot comparing hypoxia distributions across the five TMD_three_categories_detailed groups
p_3d <- ggplot(df.full, aes(x = TMD_three_categories_detailed, y = buffa, color = TMD_three_categories_detailed)) +
geom_boxplot() + labs(x = 'Tumour Mass Dormancy (Category)', y = 'Hypoxia Score (Buffa)')
# Add significance to p_3d
p_3d.comparisons <- list(c('MID','NO'), c('ID','NO'), c('AD','NO'), c('A/ID','NO'))
p_3d <- p_3d + stat_compare_means(comparisons = p_3d.comparisons, aes(label = ..p.signif..)) +
scale_color_manual(values = c('#1B9E77','#D95F02','#7570B3','grey','grey50')) +
theme_bw() + theme(legend.position = 'none')
print(p_3d)
ggsave(filename = 'Figures/Hypoxia_by_TMD.pdf', plot = p_3d)
# Alter Buffa thresholds to cluster to the nearest 10
df.full$Buffa.Group <- sapply(df.full$buffa, function(x) 10 * round(x/10))
df.full$Buffa.Group <- as.factor(df.full$Buffa.Group)
# Determine ranking of TCGA studies by TMD prevalence
tmd.by.cancer <- table(df.full$cancer_type, df.full$TMD_three_categories)
tmd.by.cancer <- data.frame(YES = tmd.by.cancer[,'YES'],
NO = tmd.by.cancer[,'NO'] + tmd.by.cancer[,'MID'])
tmd.by.cancer$TMD_Perc <- tmd.by.cancer$YES/(tmd.by.cancer$YES + tmd.by.cancer$NO)
tmd.by.cancer <- tmd.by.cancer[order(tmd.by.cancer$TMD_Perc, decreasing = TRUE),]
df.full.plot <- transform(df.full,
cancer_type = factor(cancer_type, levels = rownames(tmd.by.cancer)))
# Full plot (excluding KICH)
# KICH is removed on account of 64/65 samples being labelled as 'MID'
p_full <- ggplot(df.full.plot[df.full.plot$cancer_type != 'KICH',], aes(x = Buffa.Group, fill = TMD_three_categories_detailed)) +
geom_bar(position = 'fill') +
labs(x = 'Hypoxia Group', y = 'TMD Group') +
scale_x_discrete(drop = FALSE, breaks = c(-50, 0, 50)) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual('TMD Group', values = c('A/ID' = '#1B9E77',
'AD' = '#D95F02',
'ID' = '#7570B3',
'MID' = 'grey',
'NO' = 'grey50')) +
theme(legend.position = 'none')
print(p_full)
ggsave(filename = 'Figures/TMD_by_HypoxiaGroup_full.pdf', plot = p_full)
# Facet plot (excluding KICH)
p_facet <- p_full + facet_wrap(~ cancer_type, nrow = 5, ncol = 6) + theme(legend.position = 'top')
print(p_facet)
ggsave(filename = 'Figures/TMD_by_HypoxiaGroup_facet.pdf', plot = p_facet)
# Compare with Bhandari scores (pre-calculated, included genes within TMD programmes)
bhandari <- read.table('DataBhandariHypoxiaScores.txt', h=T)
# Compare with Bhandari scores (pre-calculated, included genes within TMD programmes)
bhandari <- read.table('Data/BhandariHypoxiaScores.txt', h=T)
load('Data/HypoxiaSignatures.Rdata') # Genes constituting defined hypoxia signatures (excluding TMD programme)
# Load program scores to show which samples are included
load('Data/programme_scores_and_TMD_assignments.RData')
dormancy_markers <- read.table('Data/dormancyMarkers_immunologic-angiogenic_updated2.txt', header = TRUE)
exhaustion_markers <- read.table('Data/exhaustionMarkers.txt')
genes.dormancy <- dormancy_markers$Gene
genes.exhaustion <- exhaustion_markers$V1
# Remove genes from hypoxia signatures which appear in dormancy signature
hypoxia.sigs$buffa <- hypoxia.sigs$buffa[!(hypoxia.sigs$buffa %in% genes.dormancy)]
hypoxia.sigs$west <- hypoxia.sigs$west[!(hypoxia.sigs$west %in% genes.dormancy)]
hypoxia.sigs$winter <- hypoxia.sigs$winter[!(hypoxia.sigs$winter) %in% genes.dormancy]
# Load FPKM-normalized expression data
#   and extract all genes included in the 3 hypoxia signatures
se.list <- list()
col.req <- c('barcode','patient','sample','Study','definition')
# Specify path to FPKM_Normalized values
se.files <- list.files(path = '../../Data/GeneExpression/FPKM_Normalized/',
pattern = 'Rdata',
full.names = TRUE)
for (file in se.files) {
study <- strsplit(file, '[.]')[[1]][6] # Alter to match study code in file name
print(paste0('Loading expression data from study: ',study,'...'))
load(file)
se$Study <- study
colData(se) <- colData(se)[,col.req]
se <- se[,se$definition == 'Primary solid Tumor'] # Extract primary tumours
se <- se[rowData(se)$external_gene_name %in% unique(unlist(hypoxia.sigs)),] # Extract genes contained across all hypoxia signatures
se.list[[study]] <- se
}
se.comb <- do.call(cbind, unlist(se.list))
se.comb <- se.comb[, prog_expr$Barcode]
se.comb.assay <- assay(se.comb)
rownames(se.comb.assay) <- rowData(se.comb)$external_gene_name
# Define function to convert expression scores into binary hypoxia profiles
hypoxia.convert <- function(expr.vec) {
median.expr <- median(expr.vec)
hypoxia.vec <- sapply(expr.vec, function(x) ifelse(x > median.expr, 1, -1))
return(hypoxia.vec)
}
# Create data frame for collating hypoxia scores
hypoxia.scores <- data.frame(Barcode = se.comb$barcode,
Study = se.comb$Study)
for (sig in c('buffa', 'west', 'winter')) {
hypoxia.sig.genes <- hypoxia.sigs[[sig]]
hypoxia.sig.genes <- hypoxia.sig.genes[hypoxia.sig.genes %in% rownames(se.comb.assay)]
se.sig <- se.comb.assay[hypoxia.sig.genes,]
se.hypoxia <- apply(se.sig, 1, hypoxia.convert)
se.hypoxia.scores <- apply(se.hypoxia, 1, sum)
hypoxia.scores[[sig]] <- se.hypoxia.scores
}
# Save hypoxia scores
save(hypoxia.scores, file = 'Data/Hypoxia_SigScores.Rdata')
# Compare with Bhandari scores (pre-calculated, included genes within TMD programmes)
bhandari <- read.table('Data/BhandariHypoxiaScores.txt', h=T)
hypoxia.scores$patient <- sapply(hypoxia.scores$Barcode,
function(x) paste(strsplit(x,'-')[[1]][1:3],collapse = '.'))
hypoxia.merge <- merge(hypoxia.scores, bhandari, by.x = 'patient', by.y = 'patient_id')
ggplot(hypoxia.merge, aes(x = buffa, y = Buffa_hypoxia_score_pan_cancer)) + geom_point(alpha = .05)
p_bhandari <- ggplot(hypoxia.merge, aes(x = buffa, y = Buffa_hypoxia_score_pan_cancer)) +
geom_point(alpha = .05) + theme_bw() +
labs(x = 'Buffa (calculated)', y = 'Buffa (Bhandari et al)')
print(p_bhandari)
ggsave(filename = 'Figures/Buffa_BhandariComparison.pdf', plot = p_bhandari)
library(SummarizedExperiment)
library(corrplot)
library(ggplot2)
library(sva)
# Load immunological dormancy gene list
dormancy.gene.list <- read.table('Data/dormancyMarkers_immunologic-angiogenic_updated2.txt', header = TRUE)
genes.dormancy <- dormancy.gene.list$Gene
# Load exhaustion gene list
exhaustion.gene.list <- read.table('Data/exhaustionMarkers.txt')
genes.exhaustion <- exhaustion.gene.list$V1
# Load hypoxia signature scores (hypoxia.scores)
load('Data/Hypoxia_SigScores.Rdata')
load('programme_scores_and_TMD_assignments.RData')
load('Data/programme_scores_and_TMD_assignments.RData')
# Combine TMD programme genes
all_genes_list <- unique(c(genes.dormancy, genes.exhaustion))
