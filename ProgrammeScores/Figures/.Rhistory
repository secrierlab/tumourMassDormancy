geom_density(color="darkblue", fill="lightblue") + theme_classic()
dev.off()
###############
##Load packages:
library(biomaRt)
library(phateR)
library(data.table)
library(ggplot2)
#######################
####Define gene lists:
#######################
setwd("~/Documents/GitHub/tumourMassDormancy/Data/GeneLists/")
exhaustion_list <- read.table("exhaustionMarkers.txt", header = FALSE, sep = "\t")
exhaustion_list <- as.character(exhaustion_list$V1)
Gene_list <- read.table("dormancyMarkers_immunologic-angiogenic_updated.txt", header = TRUE,sep = "\t")
##Create a TMD gene list:
dormancy_list_upregulated <- Gene_list[Gene_list$Direction %in% "up",]
dormancy_list_upregulated <- as.character(dormancy_list_upregulated$Gene)
dormancy_list_downregulated <- Gene_list[Gene_list$Direction %in% "down",]
dormancy_list_downregulated <- as.character(dormancy_list_downregulated$Gene)
dormancy_list <- c(dormancy_list_upregulated, dormancy_list_downregulated)
####################################################
##Biomart conversion - obtain ENSG IDS for all genes
###################################################
###Convert gene lists to ENSG
all_genes_list <- c(dormancy_list, exhaustion_list)
human = useMart("ensembl", dataset="hsapiens_gene_ensembl")
biomart_conversion <- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=all_genes_list, mart=human, filters = "hgnc_symbol")
#Two ENSG numbers are reported for PDCD1 - use ENSG00000188389 NOT ENSG00000276977
#Two ENSG numbers are reported for APOBEC3A - use ENSG00000128383 NOT ENSG00000262156
biomart_conversion <- biomart_conversion[!(biomart_conversion$ensembl_gene_id %in% c("ENSG00000276977","ENSG00000262156")),]
#################################################
##Load the expression data (no ComBat correction)
#################################################
setwd("~/Documents/GitHub/tumourMassDormancy/Data/RNA_seq/")
rnaseq_cancer <- combined_data
load("combined_experssion_FPKM.RData") #or load "example_FPKM_data.RData" for an example dataframe with 100 samples
setwd("~/Documents/TMD_manuscript_data/RNA_seq")
load("combined_experssion_FPKM.RData") #or load "example_FPKM_data.RData" for an example dataframe with 100 samples
#################################################
##Load the expression data (no ComBat correction)
#################################################
setwd("~/Documents/GitHub/tumourMassDormancy/Data/RNA_seq/")
rnaseq_cancer <- combined_data
for (i in all_genes_list) {
selected_biomart <- biomart_conversion[biomart_conversion$hgnc_symbol %in% i,]
a <- selected_biomart$ensembl_gene_id
rnaseq_cancer[[i]] <- rnaseq_cancer[[a]]
}
rnaseq_cancer[1:10,1:10]
tail(colnames(rnaseq_cancer))
#######################################
###Load scores and merge with expr data
######################################
setwd("~/Documents/GitHub/tumourMassDormancy/Data/ProgrammeScores/")
load("program_expression_scores_updated.RData")
#Merge the scores dataframe with expression dataframe to create a reference annotation df
rnaseq_cancer$Barcode <- rownames(rnaseq_cancer)
annotation <- merge(prog_expr, rnaseq_cancer,
by.x = "Barcode", by.y = "Barcode")
colnames(expr.data)
rnaseq_cancer <- rnaseq_cancer[,colnames(rnaseq_cancer) %in% c(all_genes_list,"cancer_type")]
#######################################
###Load scores and merge with expr data
######################################
setwd("~/Documents/GitHub/tumourMassDormancy/Data/ProgrammeScores/")
load("program_expression_scores_updated.RData")
#Merge dataframe:
rnaseq_cancer$Barcode <- rownames(rnaseq_cancer)
annotation <- merge(prog_expr, rnaseq_cancer,
by.x = "Barcode", by.y = "Barcode")
colnames(annotation)
#remove columns with gene expression:
annotation[,10:56] <- NULL
######Make sure expression data has only samples with score annotation
rnaseq_cancer <- rnaseq_cancer[rownames(rnaseq_cancer) %in% annotation$Barcode,]
#########################################
##Run phate using non-combat treated data
########################################
rnaseq_cancer <- rnaseq_cancer[,colnames(rnaseq_cancer) %in% c(dormancy_list, exhaustion_list)]
setwd("~/Documents/GitHub/tumourMassDormancy/Data/RNA_seq/")
save(rnaseq_cancer, file = "PHATE_expression_data_no_COMBAT.RData")
#Run PHATE:
setwd("~/Documents/GitHub/tumourMassDormancy/PHATE_analysis/NoComBat_results/")
phate_expr <- as.matrix(rnaseq_cancer)
######################################
##Load expression data (ComBat treated)
######################################
setwd("~/Documents/TMD_manuscript_data/RNA_seq/")
expr.data.combat <- fread("TCGA_combat_tumor_type_correction.txt", sep = "\t")
expr.data.combat[1:10,1:10]
test <- expr.data.combat[,1:101]
test[1:10,1:10]
expr.data.combat <- expr.data.combat[,1:101]
setwd("~/Documents/GitHub/tumourMassDormancy/Data/RNA_seq")
save(expr.data.combat, file = "example_FPKM_data_COMBAT.RData")
######################################
##Load expression data (ComBat treated)
######################################
setwd("~/Documents/TMD_manuscript_data/RNA_seq/")
expr.data.combat <- fread("TCGA_combat_tumor_type_correction.txt", sep = "\t") #Or load "example_FPKM_data_COMBAT.RData" for an example with 100 samples
expr.data.combat <- expr.data.combat[which(expr.data.combat$genes %in% c(dormancy_list, exhaustion_list)),]
all_genes <- expr.data.combat$genes
expr.data.combat$genes <- NULL
expr.data.combat <- as.data.frame(expr.data.combat)
rownames(expr.data.combat) <- all_genes
#Transpose the dataframe
expr.data.combat <- data.frame(t(expr.data.combat))
#Make sure that you select primary tumour samples:
rownames(expr.data.combat) <- gsub('\\.', '-', rownames(expr.data.combat))
expr.data.combat$SampleType <- sapply(rownames(expr.data.combat), function(x)
strsplit(x,"-")[[1]][5])
expr.data.combat <- expr.data.combat[which(expr.data.combat$SampleType %in% c("01A","01B","01C")),]
expr.data.combat$SampleType <- NULL
#remove cancer type annotation from the barcode:
rownames(expr.data.combat) <- sapply(rownames(expr.data.combat), function(x)
paste(strsplit(x,"-")[[1]][2:8],collapse="-"))
#Select only samples which have calculated programme scores:
expr.data.combat <- expr.data.combat[rownames(expr.data.combat) %in% annotation$Barcode,]
#########################################
##Run phate using Combat treated data
########################################
setwd("~/Documents/GitHub/tumourMassDormancy/Data/RNA_seq/")
save(expr.data.combat, file = "PHATE_expression_data_COMBAT.RData")
################################################################
#Plots coloured by cancer type
#Plot PHATE coodinates without COMBAT (coloured by cancer type)
setwd("~/Documents/GitHub/tumourMassDormancy/PHATE_analysis/NoComBat_results/")
load("phate_coordinates_no_combat.RData")
phate_coordinates$Barcode <- rownames(phate_coordinates)
phate_coordinates <- merge(phate_coordinates, annotation,
by.x = "Barcode", by.y = "Barcode")
##Plot PHATE coodinates with COMBAT (coloured by cancer type)
setwd("~/Documents/GitHub/tumourMassDormancy/PHATE_analysis/ComBat_results/")
load("phate_coordinates_combat.RData")
phate_coordinates_combat$Barcode <- rownames(phate_coordinates_combat)
phate_coordinates_combat <- merge(phate_coordinates_combat, annotation,
by.x = "Barcode", by.y = "Barcode")
##Load the required packages:
library(biomaRt)
library(ggpubr)
library(gtools)
library(corrplot)
library(ggplot2)
#######################
####Define gene lists used to produce the proliferation/apoptosis ratio:
#######################
setwd("~/Documents/TMD_manuscript_data/GeneLists/")
E2F_targets <- read.table("HallmarkE2FTargetGeneList.txt", header = FALSE, sep = "\t")
E2F_targets <- as.character(E2F_targets$V1)
Apoptosis_markers <- read.table("HallmarkApoptosisGeneList.txt", header = FALSE, sep = "\t")
Apoptosis_markers <- as.character(Apoptosis_markers$V1)
all_genes_list <- unique(c(E2F_targets, Apoptosis_markers))
#######################
####Define gene lists used to produce the proliferation/apoptosis ratio:
#######################
setwd("~/Documents/GitHub/tumourMassDormancy/Data/GeneLists/")
E2F_targets <- read.table("HallmarkE2FTargetGeneList.txt", header = FALSE, sep = "\t")
E2F_targets <- as.character(E2F_targets$V1)
Apoptosis_markers <- read.table("HallmarkApoptosisGeneList.txt", header = FALSE, sep = "\t")
Apoptosis_markers <- as.character(Apoptosis_markers$V1)
all_genes_list <- unique(c(E2F_targets, Apoptosis_markers))
###############################
#Load the RNA-seq data
setwd("~/Documents/TMD_manuscript_data/RNA_seq/")
load("combined_experssion_FPKM.RData")
###############################
#Load the RNA-seq data
###############################
setwd("~/Documents/GitHub/tumourMassDormancy/Data/RNA_seq/")
##############################
#Load programme scores:
setwd("~/Documents/GitHub/tumourMassDormancy/Data/ProgrammeScores/")
load("program_expression_scores_updated.RData")
rnaseq_data <- combined_data
###############################
###Obtain ENSG ID for all genes
###############################
human = useMart("ensembl", dataset="hsapiens_gene_ensembl")
biomart_conversion <- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=all_genes_list, mart=human, filters = "hgnc_symbol")
biomart_conversion <- biomart_conversion[biomart_conversion$ensembl_gene_id %in% colnames(rnaseq_data),]
###################################
###Convert HGNC symbols to ENSG ID
##################################
rnaseq_data  <- rnaseq_data[rownames(rnaseq_data) %in% prog_expr$Barcode,]
for (i in all_genes_list) {
selected_biomart <- biomart_conversion[biomart_conversion$hgnc_symbol %in% i,]
a <- selected_biomart$ensembl_gene_id
rnaseq_data[[i]] <- rnaseq_data[[a]]
}
rnaseq_data <- rnaseq_data[,colnames(rnaseq_data) %in% c(all_genes_list,"cancer_type")]
########################################
#Calculate proliferation/apoptosis ratio:
########################################
#Check that samples are in the same order in the prog_expr and rnaseq_data dataframes:
all(rownames(rnaseq_data) %in% prog_expr$Barcode)
all(rownames(rnaseq_data) == prog_expr$Barcode)
prog_expr$cancer_type <- rnaseq_data$cancer_type
prog_expr$Proliferation <- rowMeans(rnaseq_data[,colnames(rnaseq_data) %in% E2F_targets])
prog_expr$Apoptosis <- rowMeans(rnaseq_data[,colnames(rnaseq_data) %in% Apoptosis_markers])
prog_expr$Proliferation_Apoptosis_ratio <- prog_expr$Proliferation / prog_expr$Apoptosis
################################################################################################################
###Classify patients as having TMD if their TMD score is in the UQ and their Proliferation/apoptosis ratio is < 1
############################################################################################################
summary(prog_expr$TumourMassDormancy)
################################################################################################################
###Classify patients as having TMD if their TMD score is in the UQ and their Proliferation/apoptosis ratio is < 1
############################################################################################################
summary(prog_expr$TumourMassDormancy) #UQ = 0.22696
Samples1 <- prog_expr[prog_expr$TumourMassDormancy > 0.22696,]
Samples1 <- as.character(Samples1$Barcode)
Samples2 <- prog_expr[prog_expr$Proliferation_Apoptosis_ratio < 1,]
Samples2 <- as.character(Samples2$Barcode)
TMD_samples <- Samples1[Samples1 %in% Samples2]
prog_expr$TMD_two_categories <- sapply(prog_expr$Barcode, function(x)
ifelse(x %in% TMD_samples, "YES","NO"))
table(prog_expr$TMD)
###Classify samples as having low tumour mass dormancy if their TMD score is in the LQ and their Proliferation/apoptosis ration > 1
summary(prog_expr$TumourMassDormancy) #LQ = -0.14872
Samples1 <- prog_expr[prog_expr$TumourMassDormancy < -0.14872,]
Samples1 <- as.character(Samples1$Barcode)
Samples2 <- prog_expr[prog_expr$Proliferation_Apoptosis_ratio > 1,]
Samples2 <- as.character(Samples2$Barcode)
NO_TMD_samples <- Samples1[Samples1 %in% Samples2]
prog_expr$TMD_three_categories <- sapply(prog_expr$Barcode, function(x)
ifelse(x %in% TMD_samples, "YES",
ifelse(x %in% NO_TMD_samples, "NO","MID")))
table(prog_expr$TMD) #There are 1586 samples with TMD
table(prog_expr$TMD_two_categories) #There are 1586 samples with TMD
table(prog_expr$TMD_three_categories)
###################################################################################################
#######Split samples with TMD into those which angiogenesis dormancy, immunogenic dormancy or both
#################################################################################################
#Samples with angiogenic dormancy will take angiogenic dormancy score in the UQ of the score range
summary(prog_expr$AngiogenicDormancy)
angiogenesis_high <- prog_expr[prog_expr$AngiogenicDormancy > 0.03183,]
angiogenesis_high <- as.character(angiogenesis_high$Barcode)
#Samples with immunological dormancy will have immunological dormancy score in the UQ of the score range
summary(prog_expr$ImmunogenicDormancy)
#Samples with immunological dormancy will have immunological dormancy score in the UQ of the score range
summary(prog_expr$ImmunogenicDormancy) #UQ = 0.50831
immunogenic_high <- prog_expr[prog_expr$ImmunogenicDormancy > 0.50831,]
immunogenic_high <- as.character(immunogenic_high$Barcode)
angiogenesis_samples <- TMD_samples[TMD_samples %in% angiogenesis_high]
angiogenesis_samples <- angiogenesis_samples[!(angiogenesis_samples %in% immunogenic_high)]
immunogenic_samples <- TMD_samples[TMD_samples %in% immunogenic_high]
immunogenic_samples <- immunogenic_samples[!(immunogenic_samples %in% angiogenesis_high)]
both_angiogenensis_and_angiogenesis <- TMD_samples[!(TMD_samples %in% c(immunogenic_samples, angiogenesis_samples))]
setwd("~/Documents/GitHub/tumourMassDormancy/Data/ProgrammeScores/")
load("programme_scores_and_TMD_assignments.RData")
#######################################################
##PlotPHATE coordinates coloured by TMD  assignments:
setwd("~/Documents/GitHub/tumourMassDormancy/PHATE_analysis/ComBat_results/")
load("phate_coordinates_combat.RData")
phate_coordinates_combat$Barcode <- rownames(phate_coordinates_combat)
setwd("~/Documents/GitHub/tumourMassDormancy/Data/ProgrammeScores/")
load("programme_scores_and_TMD_assignments.RData")
phate_coordinates_combat <- merge(phate_coordinates_combat, prog_expr,
by.x = "Barcode", by.y = "Barcode")
setwd("~/Documents/GitHub/tumourMassDormancy/PHATE_analysis/Figures/")
pdf("PHATE_coordinates_coloured_by_TMD_assignments.pdf",height = 5, width = 8)
ggplot(phate_coordinates_combat, aes(x=PHATE1, y=PHATE2, colour = TMD_two_categories)) +
geom_point(size = 1) + theme_classic() +
theme(legend.title = element_blank(), legend.key.width = unit(1, "cm")) +
scale_colour_manual(values = c("NO" = "grey90", "YES" = "darkmagenta")) +
theme(legend.position = "right", legend.title = element_text(face = "bold", angle = 90)) +
theme(text = element_text(family = "Helvetica", size = 10))
dev.off()
################################################################
#Plots coloured by cancer type
#Plot PHATE coodinates without COMBAT (coloured by cancer type)
setwd("~/Documents/GitHub/tumourMassDormancy/PHATE_analysis/NoComBat_results/")
load("phate_coordinates_no_combat.RData")
phate_coordinates$Barcode <- rownames(phate_coordinates)
phate_coordinates <- merge(phate_coordinates, annotation,
by.x = "Barcode", by.y = "Barcode")
setwd("~/Documents/GitHub/tumourMassDormancy/PHATE_analysis/Figures/")
pdf("PHATE_no_combat_colour_by_cancertype.pdf",height = 5, width = 8)
ggplot(phate_coordinates, aes(x=PHATE1, y=PHATE2, color = cancer_type)) +
geom_point() +
theme(legend.title = element_blank(), legend.key.width = unit(1, "cm")) +
guides(color = guide_legend(override.aes = list(size=5))) + theme_classic()
dev.off()
##Plot PHATE coodinates with COMBAT (coloured by cancer type)
setwd("~/Documents/GitHub/tumourMassDormancy/PHATE_analysis/ComBat_results/")
###################################################################################
#####PHATE analysis using TMD and exhaustion genes
###################################################################################
###############
##Load packages:
library(biomaRt)
library(phateR)
library(data.table)
library(ggplot2)
#######################
####Define gene lists:
#######################
setwd("~/Documents/GitHub/tumourMassDormancy/Data/GeneLists/")
exhaustion_list <- read.table("exhaustionMarkers.txt", header = FALSE, sep = "\t")
exhaustion_list <- as.character(exhaustion_list$V1)
Gene_list <- read.table("dormancyMarkers_immunologic-angiogenic_updated.txt", header = TRUE,sep = "\t")
##Create a TMD gene list:
dormancy_list_upregulated <- Gene_list[Gene_list$Direction %in% "up",]
dormancy_list_upregulated <- as.character(dormancy_list_upregulated$Gene)
dormancy_list_downregulated <- Gene_list[Gene_list$Direction %in% "down",]
dormancy_list_downregulated <- as.character(dormancy_list_downregulated$Gene)
dormancy_list <- c(dormancy_list_upregulated, dormancy_list_downregulated)
####################################################
##Biomart conversion - obtain ENSG IDS for all genes
###################################################
###Convert gene lists to ENSG
all_genes_list <- c(dormancy_list, exhaustion_list)
human = useMart("ensembl", dataset="hsapiens_gene_ensembl")
biomart_conversion <- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=all_genes_list, mart=human, filters = "hgnc_symbol")
#Two ENSG numbers are reported for PDCD1 - use ENSG00000188389 NOT ENSG00000276977
biomart_conversion <- biomart_conversion[!(biomart_conversion$ensembl_gene_id %in% c("ENSG00000276977")),]
#################################################
##Load the expression data (no ComBat correction)
#################################################
setwd("~/Documents/GitHub/tumourMassDormancy/Data/RNA_seq/")
load("combined_experssion_FPKM.RData") #or load "example_FPKM_data.RData" for an example dataframe with 100 samples
rnaseq_cancer <- combined_data
for (i in all_genes_list) {
selected_biomart <- biomart_conversion[biomart_conversion$hgnc_symbol %in% i,]
a <- selected_biomart$ensembl_gene_id
rnaseq_cancer[[i]] <- rnaseq_cancer[[a]]
}
rnaseq_cancer <- rnaseq_cancer[,colnames(rnaseq_cancer) %in% c(all_genes_list,"cancer_type")]
#######################################
###Load scores and merge with expr data
######################################
setwd("~/Documents/GitHub/tumourMassDormancy/Data/ProgrammeScores/")
load("program_expression_scores_updated.RData")
#Merge dataframe:
rnaseq_cancer$Barcode <- rownames(rnaseq_cancer)
annotation <- merge(prog_expr, rnaseq_cancer,
by.x = "Barcode", by.y = "Barcode")
#remove columns with gene expression:
annotation[,10:56] <- NULL
######Make sure expression data has only samples with score annotation
rnaseq_cancer <- rnaseq_cancer[rownames(rnaseq_cancer) %in% annotation$Barcode,]
###############
##Load packages:
library(biomaRt)
library(phateR)
library(data.table)
library(ggplot2)
#######################
####Define gene lists:
#######################
setwd("~/Documents/GitHub/tumourMassDormancy/Data/GeneLists/")
exhaustion_list <- read.table("exhaustionMarkers.txt", header = FALSE, sep = "\t")
exhaustion_list <- as.character(exhaustion_list$V1)
Gene_list <- read.table("dormancyMarkers_immunologic-angiogenic_updated.txt", header = TRUE,sep = "\t")
##Create a TMD gene list:
dormancy_list_upregulated <- Gene_list[Gene_list$Direction %in% "up",]
dormancy_list_upregulated <- as.character(dormancy_list_upregulated$Gene)
dormancy_list_downregulated <- Gene_list[Gene_list$Direction %in% "down",]
dormancy_list_downregulated <- as.character(dormancy_list_downregulated$Gene)
dormancy_list <- c(dormancy_list_upregulated, dormancy_list_downregulated)
####################################################
##Biomart conversion - obtain ENSG IDS for all genes
###################################################
###Convert gene lists to ENSG
all_genes_list <- c(dormancy_list, exhaustion_list)
human = useMart("ensembl", dataset="hsapiens_gene_ensembl")
biomart_conversion <- getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), values=all_genes_list, mart=human, filters = "hgnc_symbol")
#Two ENSG numbers are reported for PDCD1 - use ENSG00000188389 NOT ENSG00000276977
biomart_conversion <- biomart_conversion[!(biomart_conversion$ensembl_gene_id %in% c("ENSG00000276977")),]
#################################################
##Load the expression data (no ComBat correction)
#################################################
setwd("~/Documents/GitHub/tumourMassDormancy/Data/RNA_seq/")
load("combined_experssion_FPKM.RData") #or load "example_FPKM_data.RData" for an example dataframe with 100 samples
setwd("~/Documents/TMD_manuscript_data/RNA_seq")
load("combined_experssion_FPKM.RData") #or load "example_FPKM_data.RData" for an example dataframe with 100 samples
rnaseq_cancer <- combined_data
for (i in all_genes_list) {
selected_biomart <- biomart_conversion[biomart_conversion$hgnc_symbol %in% i,]
a <- selected_biomart$ensembl_gene_id
rnaseq_cancer[[i]] <- rnaseq_cancer[[a]]
}
rnaseq_cancer <- rnaseq_cancer[,colnames(rnaseq_cancer) %in% c(all_genes_list,"cancer_type")]
#######################################
###Load scores and merge with expr data
######################################
setwd("~/Documents/GitHub/tumourMassDormancy/Data/ProgrammeScores/")
load("program_expression_scores_updated.RData")
#Merge dataframe:
rnaseq_cancer$Barcode <- rownames(rnaseq_cancer)
annotation <- merge(prog_expr, rnaseq_cancer,
by.x = "Barcode", by.y = "Barcode")
#remove columns with gene expression:
annotation[,10:56] <- NULL
######Make sure expression data has only samples with score annotation
rnaseq_cancer <- rnaseq_cancer[rownames(rnaseq_cancer) %in% annotation$Barcode,]
################################################################
#Plots coloured by cancer type
#Plot PHATE coodinates without COMBAT (coloured by cancer type)
setwd("~/Documents/GitHub/tumourMassDormancy/PHATE_analysis/NoComBat_results/")
load("phate_coordinates_no_combat.RData")
phate_coordinates$Barcode <- rownames(phate_coordinates)
phate_coordinates <- merge(phate_coordinates, annotation,
by.x = "Barcode", by.y = "Barcode")
setwd("~/Documents/GitHub/tumourMassDormancy/PHATE_analysis/Figures/")
pdf("PHATE_no_combat_colour_by_cancertype.pdf",height = 5, width = 8)
ggplot(phate_coordinates, aes(x=PHATE1, y=PHATE2, color = cancer_type)) +
geom_point() +
theme(legend.title = element_blank(), legend.key.width = unit(1, "cm")) +
guides(color = guide_legend(override.aes = list(size=5))) + theme_classic()
dev.off()
##Plot PHATE coodinates with COMBAT (coloured by cancer type)
setwd("~/Documents/GitHub/tumourMassDormancy/PHATE_analysis/ComBat_results/")
load("phate_coordinates_combat.RData")
phate_coordinates_combat$Barcode <- rownames(phate_coordinates_combat)
phate_coordinates_combat <- merge(phate_coordinates_combat, annotation,
by.x = "Barcode", by.y = "Barcode")
setwd("~/Documents/GitHub/tumourMassDormancy/PHATE_analysis/Figures/")
pdf("PHATE_combat_colour_by_cancertype.pdf",height = 5, width = 8)
ggplot(phate_coordinates_combat, aes(x=PHATE1, y=PHATE2, color = cancer_type)) +
geom_point() +
theme(legend.title = element_blank(), legend.key.width = unit(1, "cm")) +
guides(color = guide_legend(override.aes = list(size=5))) + theme_classic()
dev.off()
################################################################################
###Color the combat corrected plot by different programme scores:
setwd("~/Documents/GitHub/tumourMassDormancy/PHATE_analysis/Figures/")
pdf("PHATE_combat_colour_by_TMD_programme.pdf",height = 5, width = 8)
ggplot(phate_coordinates_combat, aes(x=PHATE1, y=PHATE2, colour = TumourMassDormancy)) +
geom_point() + theme_classic() +
theme(legend.title = element_blank(), legend.key.width = unit(1, "cm")) +
scale_color_gradient2(low = "green", midpoint = 0.3, mid = "blue", high = "red") +
theme(legend.position = "right", legend.title = element_text(face = "bold", angle = 90)) +
guides(colour = guide_colorbar(title.position = "left")) +
theme(text = element_text(family = "Helvetica", size = 10))
dev.off()
pdf("PHATE_combat_colour_by_exhaustion_programme.pdf",height = 5, width = 8)
ggplot(phate_coordinates_combat, aes(x=PHATE1, y=PHATE2, colour = Exhaustion)) +
geom_point() + theme_classic() +
theme(legend.title = element_blank(), legend.key.width = unit(1, "cm")) +
scale_color_gradient2(low = "green", midpoint = mean(phate_coordinates_combat$Exhaustion), mid = "blue", high = "red") +
theme(legend.position = "right", legend.title = element_text(face = "bold", angle = 90)) +
guides(colour = guide_colorbar(title.position = "left")) +
theme(text = element_text(family = "Helvetica", size = 10))
dev.off()
pdf("PHATE_combat_colour_by_apobec_programme.pdf",height = 5, width = 8)
ggplot(phate_coordinates_combat, aes(x=PHATE1, y=PHATE2, colour = mean_APOBEC)) +
geom_point() + theme_classic() +
theme(legend.title = element_blank(), legend.key.width = unit(1, "cm")) +
scale_color_gradient2(low = "green", midpoint = mean(phate_coordinates_combat$mean_APOBEC), mid = "blue", high = "red") +
theme(legend.position = "right", legend.title = element_text(face = "bold", angle = 90)) +
guides(colour = guide_colorbar(title.position = "left")) +
theme(text = element_text(family = "Helvetica", size = 10))
dev.off()
pdf("PHATE_combat_colour_by_immunological_dormancy_programme.pdf",height = 5, width = 8)
ggplot(phate_coordinates_combat, aes(x=PHATE1, y=PHATE2, colour = ImmunogenicDormancy)) +
geom_point() + theme_classic() +
theme(legend.title = element_blank(), legend.key.width = unit(1, "cm")) +
scale_color_gradient2(low = "green", midpoint = mean(phate_coordinates_combat$ImmunogenicDormancy), mid = "blue", high = "red") +
theme(legend.position = "right", legend.title = element_text(face = "bold", angle = 90)) +
guides(colour = guide_colorbar(title.position = "left")) +
theme(text = element_text(family = "Helvetica", size = 10))
dev.off()
pdf("PHATE_combat_colour_by_angiogenic_dormancy_programme.pdf",height = 5, width = 8)
ggplot(phate_coordinates_combat, aes(x=PHATE1, y=PHATE2, colour = AngiogenicDormancy)) +
geom_point() + theme_classic() +
theme(legend.title = element_blank(), legend.key.width = unit(1, "cm")) +
scale_color_gradient2(low = "green", midpoint = mean(phate_coordinates_combat$AngiogenicDormancy), mid = "blue", high = "red") +
theme(legend.position = "right", legend.title = element_text(face = "bold", angle = 90)) +
guides(colour = guide_colorbar(title.position = "left")) +
theme(text = element_text(family = "Helvetica", size = 10))
dev.off()
###Load packages:
library(reshape)
library(ggplot2)
###############
#Load scores:
###############
setwd("~/Documents/GitHub/tumourMassDormancy/Data/ProgrammeScores/")
load("programme_scores_and_TMD_assignments.RData")
####################################################
##Order cancer types according to the average TMD score
#######################################################
CT <- unique(prog_expr$cancer_type)
mean <- NULL
for (i in CT) {
selected.data <- prog_expr[prog_expr$cancer_type %in% i,]
x <- median(selected.data$TumourMassDormancy)
mean <- c(mean, x)
}
means <- data.frame(CT, mean)
means <- means[order(means$mean),]
Ordered_cancers <- means$CT
####################################
###Remove unnecessary columns and reshape
#####################################
prog_expr <- prog_expr[,colnames(prog_expr) %in% c("ImmunogenicDormancy","AngiogenicDormancy","Barcode","cancer_type")]
library(reshape)
prog_expr <- melt(prog_expr, id.vars = c("Barcode","cancer_type"))
prog_expr$cancer_type <- factor(prog_expr$cancer_type,
levels = Ordered_cancers)
#####
#Plot:
#####
setwd("~/Documents/GitHub/tumourMassDormancy/ProgrammeScores/Figures/")
pdf("immunogenic_and_angiogenic_dormancy_score_across_tissue_types.pdf", width = 10, height = 3)
p <- ggplot(prog_expr, aes(x=cancer_type, y=value, fill=variable)) +
geom_boxplot() + scale_color_manual(values = c("AngiogenicDormancy" = "#E7B800", "ImmunogenicDormancy" = "#FC4E07")) + theme_classic() +
ggtitle("") +
xlab("Cancer Type") + ylab("Programme Score")
p + rotate_x_text(45)
dev.off()
